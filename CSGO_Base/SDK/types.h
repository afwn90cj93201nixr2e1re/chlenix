#pragma once

#include "sdk.h"

typedef struct D3DMATRIX
{
	float m[4][4];
} D3DMATRIX , *LPD3DMATRIX;

namespace HookIndexSDK
{
	enum IVEngineClient
	{
		GetIntersectingSurfaces ,
		GetLightForPoint ,
		TraceLineMaterialAndLighting ,
		ParseFile ,
		FileCopy ,
		GetScreenSize ,
		ServerCmd ,
		ClientCmd ,
		GetPlayerInfo ,
		GetPlayerForUserID ,
		TextMessageGet ,
		Con_IsVisible ,
		GetLocalPlayer ,
		LoadModel ,
		GetLastTimeStamp ,
		GetSentence ,
		GetSentenceLength ,
		IsStreaming ,
		GetViewAngles ,
		SetViewAngles ,
		GetMaxClients ,
		Key_LookupBinding ,
		Key_BindingForKey ,
		Key_SetBinding ,
		StartKeyTrapMode ,
		CheckDoneKeyTrapping ,
		IsInGame ,
		IsConnected ,
		IsDrawingLoadingImage ,
		HideLoadingPlaque ,
		Con_NPrintf ,
		Con_NXPrintf ,
		IsBoxVisible ,
		IsBoxInViewCluster ,
		CullBox ,
		Sound_ExtraUpdate ,
		GetGameDirectory ,
		WorldToScreenMatrix ,
		WorldToViewMatrix ,
		GameLumpVersion ,
		GameLumpSize ,
		LoadGameLump ,
		LevelLeafCount ,
		GetBSPTreeQuery ,
		LinearToGamma ,
		LightStyleValue ,
		ComputeDynamicLighting ,
		GetAmbientLightColor ,
		GetDXSupportLevel ,
		SupportsHDR ,
		Mat_Stub ,
		GetChapterName ,
		GetLevelName ,
		GetLevelNameShort ,
		GetMapGroupName ,
		GetVoiceTweakAPI ,
		SetVoiceCasterID ,
		EngineStats_BeginFrame ,
		EngineStats_EndFrame ,
		FireEvents ,
		GetLeavesArea ,
		DoesBoxTouchAreaFrustum ,
		GetFrustumList ,
		ShouldUseAreaFrustum ,
		SetAudioState ,
		SentenceGroupPick ,
		SentenceGroupPickSequential ,
		SentenceIndexFromName ,
		SentenceNameFromIndex ,
		SentenceGroupIndexFromName ,
		SentenceGroupNameFromIndex ,
		SentenceLength ,
		ComputeLighting ,
		ActivateOccluder ,
		IsOccluded ,
		GetOcclusionViewId ,
		SaveAllocMemory ,
		SaveFreeMemory ,
		GetNetChannelInfo ,
		DebugDrawPhysCollide ,
		CheckPoint ,
		DrawPortals ,
		IsPlayingDemo ,
		IsRecordingDemo ,
		IsPlayingTimeDemo ,
		GetDemoRecordingTick ,
		GetDemoPlaybackTick ,
		GetDemoPlaybackStartTick ,
		GetDemoPlaybackTimeScale ,
		GetDemoPlaybackTotalTicks ,
		IsPaused ,
		GetTimescale ,
		IsTakingScreenshot ,
		IsHLTV ,
		IsLevelMainMenuBackground ,
		GetMainMenuBackgroundName ,
		SetOcclusionParameters ,
		GetUILanguage ,
		IsSkyboxVisibleFromPoint ,
		GetMapEntitiesString ,
		IsInEditMode ,
		GetScreenAspectRatio ,
		REMOVED_SteamRefreshLogin ,
		REMOVED_SteamProcessCall ,
		GetEngineBuildNumber ,
		GetProductVersionString ,
		GrabPreColorCorrectedFrame ,
		IsHammerRunning ,
		ExecuteClientCmd ,
		MapHasHDRLighting ,
		MapHasLightMapAlphaData ,
		GetAppID ,
		GetLightForPointFast ,
		ClientCmd_Unrestricted1 ,
		ClientCmd_Unrestricted2 ,
		SetRestrictServerCommands ,
		SetRestrictClientCommands ,
		SetOverlayBindProxy ,
		CopyFrameBufferToMaterial ,
		ReadConfiguration ,
		SetAchievementMgr ,
		GetAchievementMgr ,
		MapLoadFailed ,
		SetMapLoadFailed ,
		IsLowViolence ,
		GetMostRecentSaveGame ,
		SetMostRecentSaveGame ,
		StartXboxExitingProcess ,
		IsSaveInProgress ,
		IsAutoSaveDangerousInProgress ,
		OnStorageDeviceAttached ,
		OnStorageDeviceDetached ,
		GetSaveDirName ,
		WriteScreenshot ,
		ResetDemoInterpolation ,
		GetActiveSplitScreenPlayerSlot ,
		SetActiveSplitScreenPlayerSlot ,
		SetLocalPlayerIsResolvable ,
		IsLocalPlayerResolvable ,
		GetSplitScreenPlayer ,
		IsSplitScreenActive ,
		IsValidSplitScreenSlot ,
		FirstValidSplitScreenSlot ,
		NextValidSplitScreenSlot ,
		GetSinglePlayerSharedMemorySpace ,
		ComputeLightingCube ,
		RegisterDemoCustomDataCallback ,
		RecordDemoCustomData ,
		SetPitchScale ,
		GetPitchScale ,
		LoadFilmmaker ,
		UnloadFilmmaker ,
		SetLeafFlag ,
		RecalculateBSPLeafFlags ,
		DSPGetCurrentDASRoomNew ,
		DSPGetCurrentDASRoomChanged ,
		DSPGetCurrentDASRoomSkyAbove ,
		DSPGetCurrentDASRoomSkyPercent ,
		SetMixGroupOfCurrentMixer ,
		GetMixLayerIndex ,
		SetMixLayerLevel ,
		GetMixGroupIndex ,
		SetMixLayerTriggerFactor1 ,
		SetMixLayerTriggerFactor2 ,
		IsCreatingReslist ,
		IsCreatingXboxReslist ,
		SetTimescale ,
		SetGamestatsData ,
		GetGamestatsData ,
		GetMouseDelta ,
		Key_LookupBindingEx ,
		Key_CodeForBinding ,
		UpdateDAndELights ,
		GetBugSubmissionCount ,
		ClearBugSubmissionCount ,
		DoesLevelContainWater ,
		GetServerSimulationFrameTime ,
		SolidMoved ,
		TriggerMoved ,
		ComputeLeavesConnected ,
		IsInCommentaryMode ,
		SetBlurFade ,
		IsTransitioningToLoad ,
		SearchPathsChangedAfterInstall ,
		ConfigureSystemLevel ,
		SetConnectionPassword ,
		GetSteamAPIContext ,
		SubmitStatRecord ,
		ServerCmdKeyValues ,
		SpherePaintSurface ,
		HasPaintmap ,
		EnablePaintmapRender ,
		SphereTracePaintSurface ,
		RemoveAllPaint ,
		PaintAllSurfaces ,
		RemovePaint ,
		IsActiveApp ,
		IsClientLocalToActiveServer ,
		TickProgressBar ,
		GetInputContext ,
		GetStartupImage ,
		IsUsingLocalNetworkBackdoor ,
		SaveGame ,
		GetGenericMemoryStats ,
		GameHasShutdownAndFlushedMemory ,
		GetLastAcknowledgedCommand ,
		FinishContainerWrites ,
		FinishAsyncSave ,
		GetServerTick ,
		GetModDirectory ,
		AudioLanguageChanged ,
		IsAutoSaveInProgress ,
		StartLoadingScreenForCommand ,
		StartLoadingScreenForKeyValues ,
		SOSSetOpvarFloat ,
		SOSGetOpvarFloat ,
		IsSubscribedMap ,
		IsFeaturedMap ,
		GetDemoPlaybackParameters ,
		GetClientVersion ,
		IsDemoSkipping ,
		SetDemoImportantEventData ,
		ClearEvents ,
		GetSafeZoneXMin ,
		IsVoiceRecording ,
		ForceVoiceRecordOn ,
		IsReplay
	};

	enum IBaseClientDLL
	{
		Connect ,
		Disconnect ,
		Init ,
		PostInit ,
		Shutdown ,
		LevelInitPreEntity ,
		LevelInitPostEntity ,
		LevelShutdown ,
		GetAllClasses ,
		HudVidInit ,
		HudProcessInput ,
		HudUpdate ,
		HudReset ,
		HudText ,
		ShouldDrawDropdownConsole ,
		IN_ActivateMouse ,
		IN_DeactivateMouse ,
		IN_Accumulate ,
		IN_ClearStates ,
		IN_IsKeyDown ,
		IN_KeyEvent ,
		CreateMove ,
		ExtraMouseSample ,
		WriteUsercmdDeltaToBuffer ,
		EncodeUserCmdToBuffer ,
		DecodeUserCmdFromBuffer ,
		View_Render ,
		RenderView ,
		View_Fade ,
		SetCrosshairAngle ,
		InitSprite ,
		ShutdownSprite ,
		GetSpriteSize ,
		VoiceStatus ,
		PlayerAudible ,
		InstallStringTableCallback ,
		FrameStageNotify ,
		DispatchUserMessage
	};

	enum ISurface
	{
		DrawSetColor1 = 14 ,
		DrawSetColor2 = 15 ,
		DrawFilledRect = 16 ,
		DrawOutlinedRect = 18 ,
		DrawLine = 19 ,
		DrawSetTextFont = 23 ,
		DrawSetTextColor = 24 ,
		DrawSetTextPos = 26 ,
		DrawPrintText = 28 ,
		FontCreate = 71 ,
		SetFontGlyphSet = 72 ,
		GetTextSize = 79
	};

	enum IPanel
	{
		IsVisible = 15 ,
		GetName = 36 ,
		PaintTraverse = 41
	};

	enum IClientMode
	{
		CL_CreateMove = 24
	};

	enum IEngineSound
	{
		PrecacheSound ,
		IsSoundPrecached ,
		PrefetchSound ,
		IsLoopingSound ,
		GetSoundDuration ,
		EmitSound1 ,
		EmitSound2 ,
		EmitSentenceByIndex ,
		StopSound ,
		StopAllSounds
	};

	enum D3D9
	{
		QueryInterface ,
		AddRef ,
		Release ,
		TestCooperativeLevel ,
		GetAvailableTextureMem ,
		EvictManagedResources ,
		GetDirect3D ,
		GetDeviceCaps ,
		GetDisplayMode ,
		GetCreationParameters ,
		SetCursorProperties ,
		SetCursorPosition ,
		ShowCursor ,
		CreateAdditionalSwapChain ,
		GetSwapChain ,
		GetNumberOfSwapChains ,
		Reset ,
		Present ,
		GetBackBuffer ,
		GetRasterStatus ,
		SetDialogBoxMode ,
		SetGammaRamp ,
		GetGammaRamp ,
		CreateTexture ,
		CreateVolumeTexture ,
		CreateCubeTexture ,
		CreateVertexBuffer ,
		CreateIndexBuffer ,
		CreateRenderTarget ,
		CreateDepthStencilSurface ,
		UpdateSurface ,
		UpdateTexture ,
		GetRenderTargetData ,
		GetFrontBufferData ,
		StretchRect ,
		ColorFill ,
		CreateOffscreenPlainSurface ,
		SetRenderTarget ,
		GetRenderTarget ,
		SetDepthStencilSurface ,
		GetDepthStencilSurface ,
		BeginScene ,
		EndScene ,
		Clear ,
		SetTransform ,
		GetTransform ,
		MultiplyTransform ,
		SetViewport ,
		GetViewport ,
		SetMaterial ,
		GetMaterial ,
		SetLight ,
		GetLight ,
		LightEnable ,
		GetLightEnable ,
		SetClipPlane ,
		GetClipPlane ,
		SetRenderState ,
		GetRenderState ,
		CreateStateBlock ,
		BeginStateBlock ,
		EndStateBlock ,
		SetClipStatus ,
		GetClipStatus ,
		GetTexture ,
		SetTexture ,
		GetTextureStageState ,
		SetTextureStageState ,
		GetSamplerState ,
		SetSamplerState ,
		ValidateDevice ,
		SetPaletteEntries ,
		GetPaletteEntries ,
		SetCurrentTexturePalette ,
		GetCurrentTexturePalette ,
		SetScissorRect ,
		GetScissorRect ,
		SetSoftwareVertexProcessing ,
		GetSoftwareVertexProcessing ,
		SetNPatchMode ,
		GetNPatchMode ,
		DrawPrimitive ,
		DrawIndexedPrimitive ,
		DrawPrimitiveUP ,
		DrawIndexedPrimitiveUP ,
		ProcessVertices ,
		CreateVertexDeclaration ,
		SetVertexDeclaration ,
		GetVertexDeclaration ,
		SetFVF ,
		GetFVF ,
		CreateVertexShader ,
		SetVertexShader ,
		GetVertexShader ,
		SetVertexShaderConstantF ,
		GetVertexShaderConstantF ,
		SetVertexShaderConstantI ,
		GetVertexShaderConstantI ,
		SetVertexShaderConstantB ,
		GetVertexShaderConstantB ,
		SetStreamSource ,
		GetStreamSource ,
		SetStreamSourceFreq ,
		GetStreamSourceFreq ,
		SetIndices ,
		GetIndices ,
		CreatePixelShader ,
		SetPixelShader ,
		GetPixelShader ,
		SetPixelShaderConstantF ,
		GetPixelShaderConstantF ,
		SetPixelShaderConstantI ,
		GetPixelShaderConstantI ,
		SetPixelShaderConstantB ,
		GetPixelShaderConstantB ,
		DrawRectPatch ,
		DrawTriPatch ,
		DeletePatch ,
		CreateQuery
	};
}

enum PLAYER_TEAM
{
	TEAM_SPEC = 1 ,
	TEAM_TT ,
	TEAM_CT
};

enum WEAPON_TYPE
{
	WEAPON_TYPE_PISTOL ,
	WEAPON_TYPE_SHOTGUN ,
	WEAPON_TYPE_SNIPER ,
	WEAPON_TYPE_GRENADE ,
	WEAPON_TYPE_KNIFE ,
	WEAPON_TYPE_C4 ,
	WEAPON_TYPE_UNKNOWN ,
};

enum ITEM_INDEX
{
	WEAPON_NONE = 0,
	WEAPON_DEAGLE = 1 ,
	WEAPON_ELITE = 2 ,
	WEAPON_FIVESEVEN = 3 ,
	WEAPON_GLOCK = 4 ,
	WEAPON_AK47 = 7 ,
	WEAPON_AUG = 8 ,
	WEAPON_AWP = 9 ,
	WEAPON_FAMAS = 10 ,
	WEAPON_G3SG1 = 11 ,
	WEAPON_GALILAR = 13 ,
	WEAPON_M249 = 14 ,
	WEAPON_M4A1 = 16 ,
	WEAPON_MAC10 = 17 ,
	WEAPON_P90 = 19 ,
	WEAPON_UMP45 = 24 ,
	WEAPON_XM1014 = 25 ,
	WEAPON_BIZON = 26 ,
	WEAPON_MAG7 = 27 ,
	WEAPON_NEGEV = 28 ,
	WEAPON_SAWEDOFF = 29 ,
	WEAPON_TEC9 = 30 ,
	WEAPON_TASER = 31 ,
	WEAPON_HKP2000 = 32 ,
	WEAPON_MP7 = 33 ,
	WEAPON_MP9 = 34 ,
	WEAPON_NOVA = 35 ,
	WEAPON_P250 = 36 ,
	WEAPON_SCAR20 = 38 ,
	WEAPON_SG553 = 39 ,
	WEAPON_SSG08 = 40 ,
	WEAPON_KNIFE = 42 ,
	WEAPON_FLASHBANG = 43 ,
	WEAPON_HEGRENADE = 44 ,
	WEAPON_SMOKEGRENADE = 45 ,
	WEAPON_MOLOTOV = 46 ,
	WEAPON_DECOY = 47 ,
	WEAPON_INCGRENADE = 48 ,
	WEAPON_C4 = 49 ,
	WEAPON_KNIFE_T = 59 ,
	WEAPON_M4A1_SILENCER = 60 ,
	WEAPON_USP_SILENCER = 61 ,
	WEAPON_CZ75A = 63 ,
	WEAPON_REVOLVER = 64 ,
	WEAPON_KNIFE_BAYONET = 500 ,
	WEAPON_KNIFE_FLIP = 505 ,
	WEAPON_KNIFE_GUT = 506 ,
	WEAPON_KNIFE_KARAMBIT = 507 ,
	WEAPON_KNIFE_M9_BAYONET = 508 ,
	WEAPON_KNIFE_TACTICAL = 509 ,
	WEAPON_KNIFE_FALCHION = 512 ,
	WEAPON_KNIFE_SURVIVAL_BOWIE = 514 ,
	WEAPON_KNIFE_BUTTERFLY = 515 ,
	WEAPON_KNIFE_PUSH = 516
};

enum CLIENT_CLASS_ID
{
	CC_CAI_BaseNPC = 0 ,
	CC_CAK47 = 1 ,
	CC_CBaseAnimating = 2 ,
	CC_CBaseAnimatingOverlay = 3 ,
	CC_CBaseAttributableItem = 4 ,
	CC_CBaseButton = 5 ,
	CC_CBaseCombatCharacter = 6 ,
	CC_CBaseCombatWeapon = 7 ,
	CC_CBaseCSGrenade = 8 ,
	CC_CBaseCSGrenadeProjectile = 9 ,
	CC_CBaseDoor = 10 ,
	CC_CBaseEntity = 11 ,
	CC_CBaseFlex = 12 ,
	CC_CBaseGrenade = 13 ,
	CC_CBaseParticleEntity = 14 ,
	CC_CBasePlayer = 15 ,
	CC_CBasePropDoor = 16 ,
	CC_CBaseTeamObjectiveResource = 17 ,
	CC_CBaseTempEntity = 18 ,
	CC_CBaseToggle = 19 ,
	CC_CBaseTrigger = 20 ,
	CC_CBaseViewModel = 21 ,
	CC_CBaseVPhysicsTrigger = 22 ,
	CC_CBeam = 24 ,
	CC_CBeamSpotlight = 25 ,
	CC_CBoneFollower = 26 ,
	CC_CBreakableProp = 27 ,
	CC_CBreakableSurface = 28 ,
	CC_CC4 = 29 ,
	CC_CCascadeLight = 30 ,
	CC_CChicken = 31 ,
	CC_CColorCorrection = 32 ,
	CC_CColorCorrectionVolume = 33 ,
	CC_CCSGameRulesProxy = 34 ,
	CC_CCSPlayer = 35 ,
	CC_CCSPlayerResource = 36 ,
	CC_CCSRagdoll = 37 ,
	CC_CCSTeam = 38 ,
	CC_CDEagle = 39 ,
	CC_CDecoyGrenade = 40 ,
	CC_CDecoyProjectile = 41 ,
	CC_CDynamicLight = 42 ,
	CC_CDynamicProp = 43 ,
	CC_CEconEntity = 44 ,
	CC_CEmbers = 45 ,
	CC_CEntityDissolve = 46 ,
	CC_CEntityFlame = 47 ,
	CC_CEntityFreezing = 48 ,
	CC_CEntityParticleTrail = 49 ,
	CC_CEnvAmbientLight = 50 ,
	CC_CEnvDetailController = 51 ,
	CC_CEnvDOFController = 52 ,
	CC_CEnvParticleScript = 53 ,
	CC_CEnvProjectedTexture = 54 ,
	CC_CEnvQuadraticBeam = 55 ,
	CC_CEnvScreenEffect = 56 ,
	CC_CEnvScreenOverlay = 57 ,
	CC_CEnvTonemapController = 58 ,
	CC_CEnvWind = 59 ,
	CC_CFireCrackerBlast = 60 ,
	CC_CFireSmoke = 61 ,
	CC_CFireTrail = 62 ,
	CC_CFish = 63 ,
	CC_CFlashbang = 64 ,
	CC_CFogController = 65 ,
	CC_CFootstepControl = 66 ,
	CC_CFunc_Dust = 67 ,
	CC_CFunc_LOD = 68 ,
	CC_CFuncAreaPortalWindow = 69 ,
	CC_CFuncBrush = 70 ,
	CC_CFuncConveyor = 71 ,
	CC_CFuncLadder = 72 ,
	CC_CFuncMonitor = 73 ,
	CC_CFuncMoveLinear = 74 ,
	CC_CFuncOccluder = 75 ,
	CC_CFuncReflectiveGlass = 76 ,
	CC_CFuncRotating = 77 ,
	CC_CFuncSmokeVolume = 78 ,
	CC_CFuncTrackTrain = 79 ,
	CC_CGameRulesProxy = 80 ,
	CC_CHandleTest = 81 ,
	CC_CHEGrenade = 82 ,
	CC_CHostage = 83 ,
	CC_CHostageCarriableProp = 84 ,
	CC_CIncendiaryGrenade = 85 ,
	CC_CInferno = 86 ,
	CC_CInfoLadderDismount = 87 ,
	CC_CInfoOverlayAccessor = 88 ,
	CC_CItem_Healthshot = 89 ,
	CC_CKnife = 90 ,
	CC_CKnifeGG = 91 ,
	CC_CLightGlow = 92 ,
	CC_CMaterialModifyControl = 93 ,
	CC_CMolotovGrenade = 94 ,
	CC_CMolotovProjectile = 95 ,
	CC_CMovieDisplay = 96 ,
	CC_CParticleFire = 97 ,
	CC_CParticlePerformanceMonitor = 98 ,
	CC_CParticleSystem = 99 ,
	CC_CPhysBox = 100 ,
	CC_CPhysBoxMultiplayer = 101 ,
	CC_CPhysicsProp = 102 ,
	CC_CPhysicsPropMultiplayer = 103 ,
	CC_CPhysMagnet = 104 ,
	CC_CPlantedC4 = 105 ,
	CC_CPlasma = 106 ,
	CC_CPlayerResource = 107 ,
	CC_CPointCamera = 108 ,
	CC_CPointCommentaryNode = 109 ,
	CC_CPoseController = 110 ,
	CC_CPostProcessController = 111 ,
	CC_CPrecipitation = 112 ,
	CC_CPrecipitationBlocker = 113 ,
	CC_CPredictedViewModel = 114 ,
	CC_CProp_Hallucination = 115 ,
	CC_CPropDoorRotating = 116 ,
	CC_CPropJeep = 117 ,
	CC_CPropVehicleChoreoGeneric = 0 ,
	CC_CPropVehicleDriveable = 118 ,
	CC_CRagdollManager = 119 ,
	CC_CRagdollProp = 120 ,
	CC_CRagdollPropAttached = 121 ,
	CC_CRopeKeyframe = 122 ,
	CC_CSCAR17 = 123 ,
	CC_CSceneEntity = 124 ,
	CC_CSensorGrenade = 125 ,
	CC_CSensorGrenadeProjectile = 126 ,
	CC_CShadowControl = 127 ,
	CC_CSlideshowDisplay = 128 ,
	CC_CSmokeGrenade = 129 ,
	CC_CSmokeGrenadeProjectile = 130 ,
	CC_CSmokeStack = 131 ,
	CC_CSpatialEntity = 132 ,
	CC_CSpotlightEnd = 133 ,
	CC_CSprite = 134 ,
	CC_CSpriteOriented = 135 ,
	CC_CSpriteTrail = 136 ,
	CC_CStatueProp = 137 ,
	CC_CSteamJet = 138 ,
	CC_CSun = 139 ,
	CC_CSunlightShadowControl = 140 ,
	CC_CTeam = 141 ,
	CC_CTeamplayRoundBasedRulesProxy = 142 ,
	CC_CTEArmorRicochet = 143 ,
	CC_CTEBaseBeam = 144 ,
	CC_CTEBeamEntPoint = 145 ,
	CC_CTEBeamEnts = 146 ,
	CC_CTEBeamFollow = 147 ,
	CC_CTEBeamLaser = 148 ,
	CC_CTEBeamPoints = 149 ,
	CC_CTEBeamRing = 150 ,
	CC_CTEBeamRingPoint = 151 ,
	CC_CTEBeamSpline = 152 ,
	CC_CTEBloodSprite = 153 ,
	CC_CTEBloodStream = 154 ,
	CC_CTEBreakModel = 155 ,
	CC_CTEBSPDecal = 156 ,
	CC_CTEBubbles = 157 ,
	CC_CTEBubbleTrail = 158 ,
	CC_CTEClientProjectile = 159 ,
	CC_CTEDecal = 160 ,
	CC_CTEDust = 161 ,
	CC_CTEDynamicLight = 162 ,
	CC_CTEEffectDispatch = 163 ,
	CC_CTEEnergySplash = 164 ,
	CC_CTEExplosion = 165 ,
	CC_CTEFireBullets = 166 ,
	CC_CTEFizz = 167 ,
	CC_CTEFootprintDecal = 168 ,
	CC_CTEFoundryHelpers = 169 ,
	CC_CTEGaussExplosion = 170 ,
	CC_CTEGlowSprite = 171 ,
	CC_CTEImpact = 172 ,
	CC_CTEKillPlayerAttachments = 173 ,
	CC_CTELargeFunnel = 174 ,
	CC_CTEMetalSparks = 175 ,
	CC_CTEMuzzleFlash = 176 ,
	CC_CTEParticleSystem = 177 ,
	CC_CTEPhysicsProp = 178 ,
	CC_CTEPlantBomb = 179 ,
	CC_CTEPlayerAnimEvent = 180 ,
	CC_CTEPlayerDecal = 181 ,
	CC_CTEProjectedDecal = 182 ,
	CC_CTERadioIcon = 183 ,
	CC_CTEShatterSurface = 184 ,
	CC_CTEShowLine = 185 ,
	CC_CTesla = 186 ,
	CC_CTESmoke = 187 ,
	CC_CTESparks = 188 ,
	CC_CTESprite = 189 ,
	CC_CTESpriteSpray = 190 ,
	CC_CTest_ProxyToggle_Networkable = 191 ,
	CC_CTestTraceline = 192 ,
	CC_CTEWorldDecal = 193 ,
	CC_CTriggerPlayerMovement = 194 ,
	CC_CTriggerSoundOperator = 195 ,
	CC_CVGuiScreen = 196 ,
	CC_CVoteController = 197 ,
	CC_CWaterBullet = 198 ,
	CC_CWaterLODControl = 199 ,
	CC_CWeaponAug = 200 ,
	CC_CWeaponAWP = 201 ,
	CC_CWeaponBaseItem = 202 ,
	CC_CWeaponBizon = 203 ,
	CC_CWeaponCSBase = 204 ,
	CC_CWeaponCSBaseGun = 205 ,
	CC_CWeaponCubemap = 0 ,
	CC_CWeaponCycler = 206 ,
	CC_CWeaponElite = 207 ,
	CC_CWeaponFamas = 208 ,
	CC_CWeaponFiveSeven = 209 ,
	CC_CWeaponG3SG1 = 210 ,
	CC_CWeaponGalil = 211 ,
	CC_CWeaponGalilAR = 212 ,
	CC_CWeaponGlock = 213 ,
	CC_CWeaponHKP2000 = 214 ,
	CC_CWeaponM249 = 215 ,
	CC_CWeaponM3 = 216 ,
	CC_CWeaponM4A1 = 217 ,
	CC_CWeaponMAC10 = 218 ,
	CC_CWeaponMag7 = 219 ,
	CC_CWeaponMP5Navy = 220 ,
	CC_CWeaponMP7 = 221 ,
	CC_CWeaponMP9 = 222 ,
	CC_CWeaponNegev = 223 ,
	CC_CWeaponNOVA = 224 ,
	CC_CWeaponP228 = 225 ,
	CC_CWeaponP250 = 226 ,
	CC_CWeaponP90 = 227 ,
	CC_CWeaponSawedoff = 228 ,
	CC_CWeaponSCAR20 = 229 ,
	CC_CWeaponScout = 230 ,
	CC_CWeaponSG550 = 231 ,
	CC_CWeaponSG552 = 232 ,
	CC_CWeaponSG556 = 233 ,
	CC_CWeaponSSG08 = 234 ,
	CC_CWeaponTaser = 235 ,
	CC_CWeaponTec9 = 236 ,
	CC_CWeaponTMP = 237 ,
	CC_CWeaponUMP45 = 238 ,
	CC_CWeaponUSP = 239 ,
	CC_CWeaponXM1014 = 240 ,
	CC_CWorld = 241 ,
	CC_DustTrail = 242 ,
	CC_MovieExplosion = 243 ,
	CC_NextBotCombatCharacter = 0 ,
	CC_ParticleSmokeGrenade = 244 ,
	CC_RocketTrail = 245 ,
	CC_SmokeTrail = 246 ,
	CC_SporeExplosion = 247 ,
	CC_SporeTrail = 248 ,
};

template< typename Function > Function call_func( PVOID Base , DWORD Index )
{
	PDWORD* VTablePointer = (PDWORD*)Base;
	PDWORD VTableFunctionBase = *VTablePointer;
	DWORD dwAddress = VTableFunctionBase[Index];
	return (Function)( dwAddress );
}